// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.3.2 (swiftlang-1200.0.45 clang-1200.0.32.28)
// swift-module-flags: -target arm64-apple-ios9.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name Didomi
import CoreLocation
@_exported import Didomi
import Foundation
import Swift
import SystemConfiguration
import UIKit
import os
@objc(DDMEventType) public enum EventType : Swift.Int {
  case consentChanged
  case hideNotice
  case ready
  case showNotice
  case noticeClickAgree
  case noticeClickDisagree
  case noticeClickMoreInfo
  case noticeClickViewVendors
  case noticeClickPrivacyPolicy
  case preferencesClickAgreeToAll
  case preferencesClickDisagreeToAll
  case preferencesClickAgreeToAllPurposes
  case preferencesClickDisagreeToAllPurposes
  case preferencesClickResetAllPurposes
  case preferencesClickAgreeToAllVendors
  case preferencesClickDisagreeToAllVendors
  case preferencesClickPurposeAgree
  case preferencesClickPurposeDisagree
  case preferencesClickCategoryAgree
  case preferencesClickCategoryDisagree
  case preferencesClickViewVendors
  case preferencesClickViewPurposes
  case preferencesClickSaveChoices
  case preferencesClickVendorAgree
  case preferencesClickVendorDisagree
  case preferencesClickVendorSaveChoices
  case syncDone
  public typealias RawValue = Swift.Int
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
@objc public protocol ViewProviderDelegate {
  @objc func getNoticeViewController(position: Swift.String) -> UIKit.UIViewController
  @objc func getPreferencesViewController() -> UIKit.UIViewController
}
public struct Vendor : Swift.Codable {
  public var id: Swift.String?
  public var name: Swift.String?
  public var privacyPolicyUrl: Swift.String?
  public var namespace: Swift.String?
  public var namespaces: [Swift.String : Swift.String]?
  public var purposeIds: Swift.Set<Swift.String>?
  public var legIntPurposeIds: Swift.Set<Swift.String>?
  public var iabId: Swift.String?
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
extension Vendor : Swift.Equatable {
  public static func == (lhs: Vendor, rhs: Vendor) -> Swift.Bool
}
extension Vendor : Swift.Hashable {
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@objc(DDMErrorEventType) public enum DidomiErrorEventType : Swift.Int {
  case nilProperty
  case notReady
  case failedAlready
  case configFileError
  public typealias RawValue = Swift.Int
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
@objc(DDMErrorEvent) public class DidomiErrorEvent : ObjectiveC.NSObject, Swift.Error {
  @objc final public let descriptionText: Swift.String
  @objc final public let type: DidomiErrorEventType
  public init(descriptionText: Swift.String, type: DidomiErrorEventType)
  @objc deinit
  @objc override dynamic public init()
}
public struct Purpose {
  public var id: Swift.String?
  public var iabId: Swift.String?
  public var name: Swift.String?
  public var description: Swift.String?
  public var descriptionLegal: Swift.String?
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
extension Purpose : Swift.Equatable {
  public static func == (lhs: Purpose, rhs: Purpose) -> Swift.Bool
}
@_inheritsConvenienceInitializers @objc public class Didomi : ObjectiveC.NSObject {
  @objc public enum Views : Swift.Int, Swift.RawRepresentable {
    case purposes = 0
    case vendors
    public typealias RawValue = Swift.Int
    public init?(rawValue: Swift.Int)
    public var rawValue: Swift.Int {
      get
    }
  }
  @objc public static var shared: Didomi
  @objc weak public var viewProviderDelegate: ViewProviderDelegate?
  @objc override dynamic public init()
  @objc public func initialize(apiKey: Swift.String, localConfigurationPath: Swift.String?, remoteConfigurationURL: Swift.String?, providerId: Swift.String?, disableDidomiRemoteConfig: Swift.Bool = true, languageCode: Swift.String? = nil)
  @objc public func initialize(apiKey: Swift.String, localConfigurationPath: Swift.String?, remoteConfigurationURL: Swift.String?, providerId: Swift.String?, disableDidomiRemoteConfig: Swift.Bool = true, languageCode: Swift.String? = nil, noticeId: Swift.String? = nil)
  @objc public func setUserAgent(name: Swift.String, version: Swift.String)
  @objc public func setUserConsentStatus(enabledPurposeIds: Swift.Set<Swift.String>, disabledPurposeIds: Swift.Set<Swift.String>, enabledVendorIds: Swift.Set<Swift.String>, disabledVendorIds: Swift.Set<Swift.String>) -> Swift.Bool
  @objc public func isConsentRequired() -> Swift.Bool
  @objc public func isUserConsentStatusPartial() -> Swift.Bool
  @objc public func isUserLegitimateInterestStatusPartial() -> Swift.Bool
  @available(*, deprecated, message: "Use getUserStatus() instead. Search for the purposeId in getUserStatus().purposes.global.enabled or getUserStatus().purposes.consent.disabled.")
  @objc public func getUserConsentStatusForPurpose(purposeId: Swift.String) -> ConsentStatus
  @available(*, deprecated, message: "Use getUserStatus() instead. Search for the purposeId in getUserStatus().purposes.global.enabled or getUserStatus().purposes.legitimateInterest.disabled.")
  @objc public func getUserLegitimateInterestStatusForPurpose(purposeId: Swift.String) -> ConsentStatus
  @available(*, deprecated, message: "Use getUserStatus() instead. Search for the vendorId in getUserStatus().vendors.global.enabled or getUserStatus().vendors.global.disabled.")
  @objc public func getUserStatusForVendor(vendorId: Swift.String) -> ConsentStatus
  @available(*, deprecated, message: "Use getUserStatus() instead. Search for the vendorId in getUserStatus().vendors.globalConsent.enabled or getUserStatus().vendors.consent.disabled.")
  @objc public func getUserConsentStatusForVendor(vendorId: Swift.String) -> ConsentStatus
  @available(*, deprecated, message: "Use getUserStatus() instead. Search for the vendorId in getUserStatus().vendors.globalLegitimateInterest.enabled or getUserStatus().vendors.legitimateInterest.disabled.")
  @objc public func getUserLegitimateInterestStatusForVendor(vendorId: Swift.String) -> ConsentStatus
  @available(*, deprecated, message: "Use getUserStatus() instead. Search for the vendorId in getUserStatus().vendors.globalConsent.enabled or getUserStatus().vendors.globalConsent.disabled.")
  @objc public func getUserConsentStatusForVendorAndRequiredPurposes(vendorId: Swift.String) -> ConsentStatus
  @available(*, deprecated, message: "Use getUserStatus() instead. Search for the vendorId in getUserStatus().vendors.globalLegitimateInterest.enabled or getUserStatus().vendors.globalLegitimateInterest.disabled.")
  @objc public func getUserLegitimateInterestStatusForVendorAndRequiredPurposes(vendorId: Swift.String) -> ConsentStatus
  @discardableResult
  @objc public func setUserStatus(purposesConsentStatus: Swift.Bool, purposesLIStatus: Swift.Bool, vendorsConsentStatus: Swift.Bool, vendorsLIStatus: Swift.Bool) -> Swift.Bool
  @discardableResult
  @objc public func setUserStatus(enabledConsentPurposeIds: Swift.Set<Swift.String>, disabledConsentPurposeIds: Swift.Set<Swift.String>, enabledLIPurposeIds: Swift.Set<Swift.String>, disabledLIPurposeIds: Swift.Set<Swift.String>, enabledConsentVendorIds: Swift.Set<Swift.String>, disabledConsentVendorIds: Swift.Set<Swift.String>, enabledLIVendorIds: Swift.Set<Swift.String>, disabledLIVendorIds: Swift.Set<Swift.String>) -> Swift.Bool
  @discardableResult
  @objc public func setUserAgreeToAll() -> Swift.Bool
  @discardableResult
  @objc public func setUserDisagreeToAll() -> Swift.Bool
  @objc public func onReady(callback: @escaping () -> Swift.Void)
  @objc public func onError(callback: @escaping (DidomiErrorEvent) -> Swift.Void)
  @objc public func reset()
  @objc public func getRequiredPurposeIds() -> Swift.Set<Swift.String>
  @objc public func getRequiredVendorIds() -> Swift.Set<Swift.String>
  @objc public func addEventListener(listener: EventListener)
  @objc public func isReady() -> Swift.Bool
  public func getRequiredPurposes() -> [Purpose]
  public func getRequiredVendors() -> [Vendor]
  @available(*, deprecated, message: "Use getUserStatus() instead. The result of this method has been replaced by getUserStatus().purposes.global.enabled.")
  public func getEnabledPurposes() -> [Purpose]
  @available(*, deprecated, message: "Use getUserStatus() instead. The result of this method has been replaced by getUserStatus().purposes.global.enabled.")
  @objc public func getEnabledPurposeIds() -> Swift.Set<Swift.String>
  @available(*, deprecated, message: "Use getUserStatus() instead. The result of this method has been replaced by getUserStatus().purposes.consent.disabled.")
  public func getDisabledPurposes() -> [Purpose]
  @available(*, deprecated, message: "Use getUserStatus() instead. The result of this method has been replaced by getUserStatus().purposes.consent.disabled.")
  @objc public func getDisabledPurposeIds() -> Swift.Set<Swift.String>
  @available(*, deprecated, message: "Use getUserStatus() instead. The result of this method has been replaced by getUserStatus().vendors.consent.enabled.")
  public func getEnabledVendors() -> [Vendor]
  @available(*, deprecated, message: "Use getUserStatus() instead. The result of this method has been replaced by getUserStatus().vendors.consent.enabled.")
  @objc public func getEnabledVendorIds() -> Swift.Set<Swift.String>
  @available(*, deprecated, message: "Use getUserStatus() instead. The result of this method has been replaced by getUserStatus().vendors.consent.disabled.")
  public func getDisabledVendors() -> [Vendor]
  @available(*, deprecated, message: "Use getUserStatus() instead. The result of this method has been replaced by getUserStatus().vendors.consent.disabled.")
  @objc public func getDisabledVendorIds() -> Swift.Set<Swift.String>
  public func getPurpose(purposeId: Swift.String) -> Purpose?
  public func getVendor(vendorId: Swift.String) -> Vendor?
  @objc public func getJavaScriptForWebView(extra: Swift.String = "") -> Swift.String
  @objc public func getQueryStringForWebView() -> Swift.String
  @objc public func updateSelectedLanguage(languageCode: Swift.String)
  @objc deinit
}
extension Didomi : ViewProviderDelegate {
  @objc dynamic public func getNoticeViewController(position: Swift.String) -> UIKit.UIViewController
  @objc dynamic public func getPreferencesViewController() -> UIKit.UIViewController
}
extension Didomi {
  @objc dynamic public func setupUI(containerController: UIKit.UIViewController)
  @objc dynamic public func forceShowNotice()
  @objc dynamic public func showNotice()
  @objc dynamic public func hideNotice()
  @objc dynamic public func isNoticeVisible() -> Swift.Bool
  @objc dynamic public func shouldConsentBeCollected() -> Swift.Bool
  @objc dynamic public func showPreferences(controller: UIKit.UIViewController? = nil, view: Didomi.Views = .purposes)
  @objc dynamic public func hidePreferences()
  @objc dynamic public func isPreferencesVisible() -> Swift.Bool
  @objc dynamic public func getTranslatedText(key: Swift.String) -> Swift.String
  @objc dynamic public func getText(key: Swift.String) -> [Swift.String : Swift.String]?
  @objc dynamic public func setLogLevel(minLevel: Swift.UInt8)
  @objc dynamic public func setUser(id: Swift.String)
  @objc dynamic public func setUser(id: Swift.String, algorithm: Swift.String, secretId: Swift.String, salt: Swift.String?, digest: Swift.String)
  @objc dynamic public func getUserStatus() -> UserStatus
}
@_hasMissingDesignatedInitializers @objc(DDMUserStatus) @objcMembers public class UserStatus : ObjectiveC.NSObject, Swift.Codable {
  @objc final public let purposes: UserStatus.Purposes
  @objc final public let vendors: UserStatus.Vendors
  @objc final public let userID: Swift.String
  @objc final public let created: Swift.String
  @objc final public let updated: Swift.String
  @objc final public let consentString: Swift.String
  @objc final public let additionalConsent: Swift.String
  @objc override dynamic public func isEqual(_ object: Any?) -> Swift.Bool
  @objc override dynamic public init()
  required public init(from decoder: Swift.Decoder) throws
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
}
extension UserStatus {
  @_hasMissingDesignatedInitializers @objc(DDMUserStatusPurposes) @objcMembers public class Purposes : ObjectiveC.NSObject, Swift.Codable {
    @objc final public let consent: UserStatus.IDs
    @objc final public let legitimateInterest: UserStatus.IDs
    @objc final public let global: UserStatus.IDs
    @objc final public let essential: Swift.Set<Swift.String>
    required public init(from decoder: Swift.Decoder) throws
    @objc override dynamic public func isEqual(_ object: Any?) -> Swift.Bool
    @objc override dynamic public init()
    @objc deinit
    public func encode(to encoder: Swift.Encoder) throws
  }
}
extension UserStatus {
  @_hasMissingDesignatedInitializers @objc(DDMUserStatusVendors) @objcMembers public class Vendors : ObjectiveC.NSObject, Swift.Codable {
    @objc final public let consent: UserStatus.IDs
    @objc final public let legitimateInterest: UserStatus.IDs
    @objc final public let global: UserStatus.IDs
    @objc final public let globalConsent: UserStatus.IDs
    @objc final public let globalLegitimateInterest: UserStatus.IDs
    required public init(from decoder: Swift.Decoder) throws
    @objc override dynamic public func isEqual(_ object: Any?) -> Swift.Bool
    @objc override dynamic public init()
    @objc deinit
    public func encode(to encoder: Swift.Encoder) throws
  }
}
extension UserStatus {
  @_hasMissingDesignatedInitializers @objc(DDMUserStatusIDs) @objcMembers public class IDs : ObjectiveC.NSObject, Swift.Codable {
    @objc final public let enabled: Swift.Set<Swift.String>
    @objc final public let disabled: Swift.Set<Swift.String>
    @objc override dynamic public func isEqual(_ object: Any?) -> Swift.Bool
    @objc override dynamic public init()
    required public init(from decoder: Swift.Decoder) throws
    @objc deinit
    public func encode(to encoder: Swift.Encoder) throws
  }
}
@_inheritsConvenienceInitializers @objc(DDMEventListener) public class EventListener : ObjectiveC.NSObject {
  @objc public var onConsentChanged: (EventType) -> Swift.Void
  @objc public var onHideNotice: (EventType) -> Swift.Void
  @objc public var onReady: (EventType) -> Swift.Void
  @objc public var onError: (DidomiErrorEvent) -> Swift.Void
  @objc public var onShowNotice: (EventType) -> Swift.Void
  @objc public var onNoticeClickAgree: (EventType) -> Swift.Void
  @objc public var onNoticeClickDisagree: (EventType) -> Swift.Void
  @objc public var onNoticeClickMoreInfo: (EventType) -> Swift.Void
  @objc public var onNoticeClickViewVendors: (EventType) -> Swift.Void
  @objc public var onNoticeClickPrivacyPolicy: (EventType) -> Swift.Void
  @objc public var onPreferencesClickAgreeToAll: (EventType) -> Swift.Void
  @objc public var onPreferencesClickDisagreeToAll: (EventType) -> Swift.Void
  @objc public var onPreferencesClickAgreeToAllPurposes: (EventType) -> Swift.Void
  @objc public var onPreferencesClickDisagreeToAllPurposes: (EventType) -> Swift.Void
  @objc public var onPreferencesClickResetAllPurposes: (EventType) -> Swift.Void
  @objc public var onPreferencesClickAgreeToAllVendors: (EventType) -> Swift.Void
  @objc public var onPreferencesClickDisagreeToAllVendors: (EventType) -> Swift.Void
  @objc public var onPreferencesClickPurposeAgree: (EventType, Swift.String?) -> Swift.Void
  @objc public var onPreferencesClickPurposeDisagree: (EventType, Swift.String?) -> Swift.Void
  @objc public var onPreferencesClickCategoryAgree: (EventType, Swift.String?) -> Swift.Void
  @objc public var onPreferencesClickCategoryDisagree: (EventType, Swift.String?) -> Swift.Void
  @objc public var onPreferencesClickViewVendors: (EventType) -> Swift.Void
  @objc public var onPreferencesClickViewPurposes: (EventType) -> Swift.Void
  @objc public var onPreferencesClickSaveChoices: (EventType) -> Swift.Void
  @objc public var onPreferencesClickVendorAgree: (EventType, Swift.String?) -> Swift.Void
  @objc public var onPreferencesClickVendorDisagree: (EventType, Swift.String?) -> Swift.Void
  @objc public var onPreferencesClickVendorSaveChoices: (EventType) -> Swift.Void
  @objc public var onSyncDone: (EventType, Swift.String?) -> Swift.Void
  @objc override dynamic public init()
  @objc deinit
}
@objc public enum ConsentStatus : Swift.Int {
  case enable
  case disable
  case unknown
  public typealias RawValue = Swift.Int
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
extension EventType : Swift.Equatable {}
extension EventType : Swift.Hashable {}
extension EventType : Swift.RawRepresentable {}
extension DidomiErrorEventType : Swift.Equatable {}
extension DidomiErrorEventType : Swift.Hashable {}
extension DidomiErrorEventType : Swift.RawRepresentable {}
extension Purpose : Swift.Encodable {}
extension Purpose : Swift.Decodable {}
extension Didomi.Views : Swift.Equatable {}
extension Didomi.Views : Swift.Hashable {}
extension ConsentStatus : Swift.Equatable {}
extension ConsentStatus : Swift.Hashable {}
extension ConsentStatus : Swift.RawRepresentable {}
